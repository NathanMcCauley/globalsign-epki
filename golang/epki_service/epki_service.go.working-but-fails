package epki_service

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type GetProfiles struct {
	XMLName xml.Name `xml:"GetProfiles"`

	Request *GetCrProfileRequest `xml:"Request,omitempty"`
}

type GetCrProfileRequest struct {
	XMLName xml.Name `xml:"GetCrProfileRequest"`

	QueryRequestHeader *QueryRequestHeader `xml:"QueryRequestHeader,omitempty"`

	ProfileQueryParam *ProfileQueryParam `xml:"ProfileQueryParam,omitempty"`
}

type QueryRequestHeader struct {
	XMLName xml.Name `xml:"QueryRequestHeader"`

	AuthToken *AuthToken `xml:"AuthToken,omitempty"`
}

type AuthToken struct {
	XMLName xml.Name `xml:"AuthToken"`

	UserName string `xml:"UserName,omitempty"`

	Password string `xml:"Password,omitempty"`
}

type ProfileQueryParam struct {
	XMLName xml.Name `xml:"ProfileQueryParam"`

	ProfileOrderNo string `xml:"ProfileOrderNo,omitempty"`

	ProfileOrderState string `xml:"ProfileOrderState,omitempty"`

	RequestDateFrom string `xml:"RequestDateFrom,omitempty"`

	RequestDateTo string `xml:"RequestDateTo,omitempty"`

	IssueDateFrom string `xml:"IssueDateFrom,omitempty"`

	IssueDateTo string `xml:"IssueDateTo,omitempty"`

	Locality string `xml:"Locality,omitempty"`

	StateOrProvince string `xml:"StateOrProvince,omitempty"`

	Organization string `xml:"Organization,omitempty"`

	OrganizationUnit string `xml:"OrganizationUnit,omitempty"`

	ContractorUserId string `xml:"ContractorUserId,omitempty"`
}

type GetProfilesResponse struct {
	XMLName xml.Name `xml:"GetProfilesResponse"`

	Response *GetCrProfileResponse `xml:"Response,omitempty"`
}

type GetCrProfileResponse struct {
	XMLName xml.Name `xml:"GetCrProfileResponse"`

	QueryResponseHeader *QueryResponseHeader `xml:"QueryResponseHeader,omitempty"`

	TotalCount int32 `xml:"TotalCount,omitempty"`

	ProfileDetails *ProfileDetails `xml:"ProfileDetails,omitempty"`
}

type QueryResponseHeader struct {
	XMLName xml.Name `xml:"QueryResponseHeader"`

	SuccessCode int32 `xml:"SuccessCode,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	Timestamp time.Time `xml:"Timestamp,omitempty"`
}

type Errors struct {
	XMLName xml.Name `xml:"Errors"`

	Error []*Error `xml:"Error,omitempty"`
}

type Error struct {
	XMLName xml.Name `xml:"Error"`

	ErrorCode string `xml:"ErrorCode,omitempty"`

	ErrorField string `xml:"ErrorField,omitempty"`

	ErrorMessage string `xml:"ErrorMessage,omitempty"`
}

type ProfileDetails struct {
	XMLName xml.Name `xml:"ProfileDetails"`

	ProfileDetail []*ProfileDetail `xml:"ProfileDetail,omitempty"`
}

type ProfileDetail struct {
	XMLName xml.Name `xml:"ProfileDetail"`

	ProfileInfo *ProfileInfo `xml:"ProfileInfo,omitempty"`

	ProfileDnAttributes *ProfileDnAttributes `xml:"ProfileDnAttributes,omitempty"`

	ProfileAttributes *ProfileAttributes `xml:"ProfileAttributes,omitempty"`
}

type ProfileInfo struct {
	XMLName xml.Name `xml:"ProfileInfo"`

	ProfileOrderNo string `xml:"ProfileOrderNo,omitempty"`

	ProfileOrderState string `xml:"ProfileOrderState,omitempty"`

	RequestDate string `xml:"RequestDate,omitempty"`

	RequestBeforeDate string `xml:"RequestBeforeDate,omitempty"`

	RequestAfterDate string `xml:"RequestAfterDate,omitempty"`

	OrderDate string `xml:"OrderDate,omitempty"`

	IssueDate string `xml:"IssueDate,omitempty"`

	CancelRequestDate string `xml:"CancelRequestDate,omitempty"`

	CancelDate string `xml:"CancelDate,omitempty"`

	SuspendRequestDate string `xml:"SuspendRequestDate,omitempty"`

	SuspendDate string `xml:"SuspendDate,omitempty"`

	ValidityPeriod *ValidityPeriod `xml:"ValidityPeriod,omitempty"`
}

type ValidityPeriod struct {
	XMLName xml.Name `xml:"ValidityPeriod"`

	NotBefore string `xml:"NotBefore,omitempty"`

	NotAfter string `xml:"NotAfter,omitempty"`
}

type ProfileDnAttributes struct {
	XMLName xml.Name `xml:"ProfileDnAttributes"`

	CommonName string `xml:"CommonName,omitempty"`

	Organization string `xml:"Organization,omitempty"`

	OrganizationUnits *OrganizationUnits `xml:"OrganizationUnits,omitempty"`

	StateOrProvince string `xml:"StateOrProvince,omitempty"`

	Locality string `xml:"Locality,omitempty"`

	Country string `xml:"Country,omitempty"`
}

type OrganizationUnits struct {
	XMLName xml.Name `xml:"OrganizationUnits"`

	OrganizationUnit []string `xml:"OrganizationUnit,omitempty"`
}

type ProfileAttributes struct {
	XMLName xml.Name `xml:"ProfileAttributes"`

	HashType string `xml:"HashType,omitempty"`

	EFSOption string `xml:"EFSOption,omitempty"`

	UPN string `xml:"UPN,omitempty"`

	RenewalType string `xml:"RenewalType,omitempty"`

	NonExportable string `xml:"NonExportable,omitempty"`

	NonRepudiation string `xml:"NonRepudiation,omitempty"`

	OCSPOption string `xml:"OCSPOption,omitempty"`
}

type OrderPkcs12 struct {
	XMLName xml.Name `xml:"OrderPkcs12"`

	Request *Pkcs12OrderRequest `xml:"Request,omitempty"`
}

type Pkcs12OrderRequest struct {
	XMLName xml.Name `xml:"Request"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	ProfileID string `xml:"ProfileID,omitempty"`

	PKCS12PIN string `xml:"PKCS12PIN,omitempty"`

	ProductCode string `xml:"ProductCode,omitempty"`

	Year int32 `xml:"Year,omitempty"`

	EFSOption bool `xml:"EFSOption,omitempty"`

	Renew bool `xml:"Renew,omitempty"`

	UPN string `xml:"UPN,omitempty"`

	DnAttributes *DnAttributes `xml:"DnAttributes,omitempty"`
}

type OrderRequestHeader struct {
	XMLName xml.Name `xml:"OrderRequestHeader"`

	AuthToken *AuthToken `xml:"AuthToken,omitempty"`
}

type DnAttributes struct {
	XMLName xml.Name `xml:"DnAttributes"`

	CommonName string `xml:"CommonName,omitempty"`

	OrganizationUnit []string `xml:"OrganizationUnit,omitempty"`

	Email string `xml:"Email,omitempty"`
}

type OrderPkcs12Response struct {
	XMLName xml.Name `xml:"OrderPkcs12Response"`

	Response *Pkcs12OrderResponse `xml:"Response,omitempty"`
}

type Pkcs12OrderResponse struct {
	XMLName xml.Name `xml:"Response"`

	OrderResponseHeader *OrderResponseHeader `xml:"OrderResponseHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`

	BASE64PKCS12 string `xml:"BASE64PKCS12,omitempty"`

	PKCS12 []byte `xml:"PKCS12,omitempty"`
}

type OrderResponseHeader struct {
	XMLName xml.Name `xml:"OrderResponseHeader"`

	SuccessCode int32 `xml:"SuccessCode,omitempty"`

	Errors *Errors `xml:"Errors,omitempty"`

	Timestamp time.Time `xml:"Timestamp,omitempty"`
}

type OrderAndIssueCertificate struct {
	XMLName xml.Name `xml:"OrderAndIssueCertificate"`

	Request *OrderAndIssueRequest `xml:"Request,omitempty"`
}

type OrderAndIssueRequest struct {
	//XMLName xml.Name `xml:"OrderAndIssueRequest"`
	XMLName xml.Name `xml:"Request"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	ProfileID string `xml:"ProfileID,omitempty"`

	ProductCode string `xml:"ProductCode,omitempty"`

	Year int32 `xml:"Year,omitempty"`

	CSR string `xml:"CSR,omitempty"`

	EFSOption bool `xml:"EFSOption,omitempty"`

	UPN string `xml:"UPN,omitempty"`

	DnAttributes *DnAttributes `xml:"DnAttributes,omitempty"`

	PickupPassword string `xml:"PickupPassword,omitempty"`

	CertificateTemplate *CertificateTemplate `xml:"CertificateTemplate,omitempty"`
}

type CertificateTemplate struct {
	XMLName xml.Name `xml:"CertificateTemplate"`

	Template string `xml:"Template,omitempty"`

	MajorVersion string `xml:"MajorVersion,omitempty"`

	MinorVersion string `xml:"MinorVersion,omitempty"`
}

type OrderAndIssueCertificateResponse struct {
	XMLName xml.Name `xml:"OrderAndIssueCertificateResponse"`

	Response *OrderAndIssueResponse `xml:"Response,omitempty"`
}

type OrderAndIssueResponse struct {
	XMLName xml.Name `xml:"Response"`

	OrderResponseHeader *OrderResponseHeader `xml:"OrderResponseHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`

	CERT string `xml:"CERT,omitempty"`
}

type OrderCertificate struct {
	XMLName xml.Name `xml:"OrderCertificate"`

	Request *OrderRequest `xml:"Request,omitempty"`
}

type OrderRequest struct {
	XMLName xml.Name `xml:"OrderRequest"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	ProfileID string `xml:"ProfileID,omitempty"`

	ProductCode string `xml:"ProductCode,omitempty"`

	Year int32 `xml:"Year,omitempty"`

	HasCSR bool `xml:"HasCSR,omitempty"`

	PKCS12Option bool `xml:"PKCS12Option,omitempty"`

	EFSOption bool `xml:"EFSOption,omitempty"`

	UPN string `xml:"UPN,omitempty"`

	DnAttributes *DnAttributes `xml:"DnAttributes,omitempty"`

	PickupPassword string `xml:"PickupPassword,omitempty"`
}

type OrderCertificateResponse struct {
	XMLName xml.Name `xml:"OrderCertificateResponse"`

	Response *OrderResponse `xml:"Response,omitempty"`
}

type OrderResponse struct {
	XMLName xml.Name `xml:"OrderResponse"`

	OrderResponseHeader *OrderResponseHeader `xml:"OrderResponseHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`
}

type Cancel struct {
	XMLName xml.Name `xml:"Cancel"`

	Request *CancelOrderRequest `xml:"Request,omitempty"`
}

type CancelOrderRequest struct {
	XMLName xml.Name `xml:"CancelOrderRequest"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`
}

type CancelResponse struct {
	XMLName xml.Name `xml:"CancelResponse"`

	Response *CancelOrderResponse `xml:"Response,omitempty"`
}

type CancelOrderResponse struct {
	XMLName xml.Name `xml:"CancelOrderResponse"`

	OrderResponseHeader *OrderResponseHeader `xml:"OrderResponseHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`
}

type Revoke struct {
	XMLName xml.Name `xml:"Revoke"`

	Request *RevokeOrderRequest `xml:"Request,omitempty"`
}

type RevokeOrderRequest struct {
	XMLName xml.Name `xml:"RevokeOrderRequest"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`
}

type RevokeResponse struct {
	XMLName xml.Name `xml:"RevokeResponse"`

	Response *RevokeOrderResponse `xml:"Response,omitempty"`
}

type RevokeOrderResponse struct {
	XMLName xml.Name `xml:"RevokeOrderResponse"`

	OrderResponseHeader *OrderResponseHeader `xml:"orderResponseHeader,omitempty"`

	OrderNo string `xml:"orderNo,omitempty"`
}

type GetOrders struct {
	XMLName xml.Name `xml:"GetOrders"`

	Request *GetCrOrdersRequest `xml:"Request,omitempty"`
}

type GetCrOrdersRequest struct {
	XMLName xml.Name `xml:"GetCrOrdersRequest"`

	QueryRequestHeader *QueryRequestHeader `xml:"QueryRequestHeader,omitempty"`

	OrderQueryParam *OrderQueryParam `xml:"OrderQueryParam,omitempty"`

	OrdersQueryOption *OrdersQueryOption `xml:"OrdersQueryOption,omitempty"`
}

type OrderQueryParam struct {
	XMLName xml.Name `xml:"OrderQueryParam"`

	ProductCode string `xml:"ProductCode,omitempty"`

	ProfileOrderNo string `xml:"ProfileOrderNo,omitempty"`

	LicenseOrderNo string `xml:"LicenseOrderNo,omitempty"`

	OrderState string `xml:"OrderState,omitempty"`

	CertState string `xml:"CertState,omitempty"`

	RequestDateFrom string `xml:"RequestDateFrom,omitempty"`

	RequestDateTo string `xml:"RequestDateTo,omitempty"`

	IssueDateFrom string `xml:"IssueDateFrom,omitempty"`

	IssueDateTo string `xml:"IssueDateTo,omitempty"`

	CommonName string `xml:"CommonName,omitempty"`
}

type OrdersQueryOption struct {
	XMLName xml.Name `xml:"OrdersQueryOption"`

	ReturnCertificateInfo string `xml:"ReturnCertificateInfo,omitempty"`

	ReturnFulfillment string `xml:"ReturnFulfillment,omitempty"`
}

type GetOrdersResponse struct {
	XMLName xml.Name `xml:"GetOrdersResponse"`

	Response *GetCrOrdersResponse `xml:"Response,omitempty"`
}

type GetCrOrdersResponse struct {
	XMLName xml.Name `xml:"GetCrOrdersResponse"`

	QueryResponseHeader *QueryResponseHeader `xml:"QueryResponseHeader,omitempty"`

	TotalCount int32 `xml:"TotalCount,omitempty"`

	OrderDetails *OrderDetails `xml:"OrderDetails,omitempty"`
}

type OrderDetails struct {
	XMLName xml.Name `xml:"OrderDetails"`

	OrderDetail []*OrderDetail `xml:"OrderDetail,omitempty"`
}

type OrderDetail struct {
	XMLName xml.Name `xml:"OrderDetail"`

	OrderInfo *OrderInfo `xml:"OrderInfo,omitempty"`

	CrCertificateInfo *CertificateInfo `xml:"CrCertificateInfo,omitempty"`

	Fulfillment *Fulfillment `xml:"Fulfillment,omitempty"`

	ModificationEvents *ModificationEvents `xml:"ModificationEvents,omitempty"`
}

type OrderInfo struct {
	XMLName xml.Name `xml:"OrderInfo"`

	OrderNo string `xml:"OrderNo,omitempty"`

	OrderStatus string `xml:"OrderStatus,omitempty"`

	ProductCode string `xml:"ProductCode,omitempty"`

	OriginalOrderIDForReIssue string `xml:"OriginalOrderIDForReIssue,omitempty"`

	ProfileNo string `xml:"ProfileNo,omitempty"`

	LicenseNo string `xml:"LicenseNo,omitempty"`

	RequestDate string `xml:"RequestDate,omitempty"`

	RequestBeforeDate string `xml:"RequestBeforeDate,omitempty"`

	RequestAfterDate string `xml:"RequestAfterDate,omitempty"`

	OrderDate string `xml:"OrderDate,omitempty"`

	IssueDate string `xml:"IssueDate,omitempty"`

	CancelRequestDate string `xml:"CancelRequestDate,omitempty"`

	CancelRequestUser string `xml:"CancelRequestUser,omitempty"`

	CancelDate string `xml:"CancelDate,omitempty"`

	RevokeRequestDate string `xml:"RevokeRequestDate,omitempty"`

	RevokeRequestUser string `xml:"RevokeRequestUser,omitempty"`

	RevokeDate string `xml:"RevokeDate,omitempty"`

	ValidityPeriod *ValidityPeriod `xml:"ValidityPeriod,omitempty"`
}

type CertificateInfo struct {
	XMLName xml.Name `xml:"CertificateInfo"`

	CertificateStatus string `xml:"CertificateStatus,omitempty"`

	SerialNumber string `xml:"SerialNumber,omitempty"`

	StartDate string `xml:"StartDate,omitempty"`

	EndDate string `xml:"EndDate,omitempty"`

	Email string `xml:"Email,omitempty"`

	CommonName string `xml:"CommonName,omitempty"`

	OrganizationUnits *OrganizationUnits `xml:"OrganizationUnits,omitempty"`

	Organization string `xml:"Organization,omitempty"`

	Locality string `xml:"Locality,omitempty"`

	State string `xml:"State,omitempty"`

	Country string `xml:"Country,omitempty"`
}

type Fulfillment struct {
	XMLName xml.Name `xml:"Fulfillment"`

	CrCertificate *CrCertificate `xml:"CrCertificate,omitempty"`
}

type CrCertificate struct {
	XMLName xml.Name `xml:"CrCertificate"`

	Certificate string `xml:"Certificate,omitempty"`

	PKCS7Cert string `xml:"PKCS7Cert,omitempty"`
}

type ModificationEvents struct {
	XMLName xml.Name `xml:"ModificationEvents"`

	ModificationEvent []*ModificationEvent `xml:"ModificationEvent,omitempty"`
}

type ModificationEvent struct {
	XMLName xml.Name `xml:"ModificationEvent"`

	ModificationEventName string `xml:"ModificationEventName,omitempty"`

	ModificationEventTimestamp string `xml:"ModificationEventTimestamp,omitempty"`
}

type GetOrderByOrderId struct {
	XMLName xml.Name `xml:"GetOrderByOrderId"`

	Request *GetCrOrderByOrderIdRequest `xml:"Request,omitempty"`
}

type GetCrOrderByOrderIdRequest struct {
	XMLName xml.Name `xml:"GetCrOrderByOrderIdRequest"`

	QueryRequestHeader *QueryRequestHeader `xml:"QueryRequestHeader,omitempty"`

	OrderNo string `xml:"OrderNo,omitempty"`

	OrderQueryOption *OrderQueryOption `xml:"OrderQueryOption,omitempty"`
}

type OrderQueryOption struct {
	XMLName xml.Name `xml:"OrderQueryOption"`

	ReturnCertificateInfo string `xml:"ReturnCertificateInfo,omitempty"`

	ReturnFulfillment string `xml:"ReturnFulfillment,omitempty"`

	ReturnP7 string `xml:"ReturnP7,omitempty"`

	ReturnModEvents string `xml:"ReturnModEvents,omitempty"`
}

type GetOrderByOrderIdResponse struct {
	XMLName xml.Name `xml:"GetOrderByOrderIdResponse"`

	Response *GetCrOrderByOrderIdResponse `xml:"Response,omitempty"`
}

type GetCrOrderByOrderIdResponse struct {
	XMLName xml.Name `xml:"GetCrOrderByOrderIdResponse"`

	QueryResponseHeader *QueryResponseHeader `xml:"QueryResponseHeader,omitempty"`

	OrderNo string `xml:"OrderNo,omitempty"`

	OrderDetail *OrderDetail `xml:"OrderDetail,omitempty"`
}

type Reissue struct {
	XMLName xml.Name `xml:"Reissue"`

	Request *ReissueOrderRequest `xml:"Request,omitempty"`
}

type ReissueOrderRequest struct {
	XMLName xml.Name `xml:"ReissueOrderRequest"`

	OrderRequestHeader *OrderRequestHeader `xml:"OrderRequestHeader,omitempty"`

	TargetOrderID string `xml:"TargetOrderID,omitempty"`

	PickupPassword string `xml:"PickupPassword,omitempty"`
}

type ReissueResponse struct {
	XMLName xml.Name `xml:"ReissueResponse"`

	Response *ReissueOrderResponse `xml:"Response,omitempty"`
}

type ReissueOrderResponse struct {
	XMLName xml.Name `xml:"ReissueOrderResponse"`

	OrderResponseHeader *OrderResponseHeader `xml:"OrderResponseHeader,omitempty"`

	OrderID string `xml:"OrderID,omitempty"`
}

type GasOrderService struct {
	client *gowsdl.SoapClient
}

func NewGasOrderService(url string, tls bool) *GasOrderService {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &GasOrderService{
		client: client,
	}
}

func (service *GasOrderService) GetProfiles(request *GetProfiles) (*GetProfilesResponse, error) {
	response := &GetProfilesResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) OrderPkcs12(request *OrderPkcs12) (*OrderPkcs12Response, error) {
	response := &OrderPkcs12Response{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) OrderAndIssueCertificate(request *OrderAndIssueCertificate) (*OrderAndIssueCertificateResponse, error) {
	response := &OrderAndIssueCertificateResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) OrderCertificate(request *OrderCertificate) (*OrderCertificateResponse, error) {
	response := &OrderCertificateResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) Cancel(request *Cancel) (*CancelResponse, error) {
	response := &CancelResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) Revoke(request *Revoke) (*RevokeResponse, error) {
	response := &RevokeResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) GetOrders(request *GetOrders) (*GetOrdersResponse, error) {
	response := &GetOrdersResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) GetOrderByOrderId(request *GetOrderByOrderId) (*GetOrderByOrderIdResponse, error) {
	response := &GetOrderByOrderIdResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *GasOrderService) Reissue(request *Reissue) (*ReissueResponse, error) {
	response := &ReissueResponse{}
	err := service.client.Call("", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}
